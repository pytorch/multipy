name: Runtime Unittests More

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  unittest:
    strategy:
      matrix:
        python-version: [3.8]
        platform: [linux.2xlarge]
      fail-fast: false
    runs-on: ${{ matrix.platform }}
    steps:
      - name: Update pip
        run: |
          sudo yum update -y
          sudo yum -y install git python3-pip
          sudo pip3 install --upgrade pip
      - name: Install C++ toolchain
            sudo yum -y install clang llvm
            export CC=clang

      - name: Setup conda
        run: |
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O ~/miniconda.sh
          bash ~/miniconda.sh -b -p $HOME/miniconda
      - name: setup Path
        run: |
          echo "/home/ec2-user/miniconda/bin" >> $GITHUB_PATH
          echo "CONDA=/home/ec2-user/miniconda" >> $GITHUB_PATH
      - name: create conda env
        run: |
          conda create --name multipy_runtime_env python=${{ matrix.python-version }}
          conda info

      - name: Checkout MultiPy
        uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install python/pytorch dependencies
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
          conda run -n multipy_runtime_env python -m pip install astunparse numpy ninja pyyaml mkl mkl-include setuptools cmake cffi typing_extensions future six requests dataclasses pytest
      - name: Build third-party libraries
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
              cd runtime/third-party/fmt
              mkdir build
              cd build
              conda run -n multipy_runtime_env cmake ..
              cd ../../pybind11
              mkdir build
              cd build
              conda run -n multipy_runtime_env cmake ..
              cd ../../pytorch
              USE_DEPLOY=1
              conda run -n multipy_runtime_env python setup.py develop
              echo "find -name *libtorch_python_static.a*"
              find -name *libtorch_python_static.a*
              cd ../..
      - name: Build multipy runtime
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
              echo "find -name *libtorch_python_static.a*"
              find -name *libtorch_python_static.a*
              cd runtime
              mkdir build
              cd build
              conda run -n multipy_runtime_env cmake -DCMAKE_VERBOSE_MAKEFILE:BOOL=OFF -DCMAKE_PREFIX_PATH="../third-party/pybind11/build;../third-party/fmt/build" ..
              conda run -n multipy_runtime_env cmake --build . --config Release
              cd ..
      - name: Run test_deploy
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
              # A minor hack to get the CI working as conda doesn't have torch,
              # fortunately we can remove this once we have a dynamically linked torch
              conda run -n multipy_runtime_env python -m pip install torch torchvision torchaudio

              conda run -n multipy_runtime_env python runtime/example/generate_examples.py
              bash runtime/build/test_deploy
      - name: Run test_deploy_dummy
        shell: bash -l {0}
        env:
          PYTHON_VERSION: ${{ matrix.python-version }}
        run: |
              bash runtime/build/test_deploy
