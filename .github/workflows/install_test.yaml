name: Install tests

on:
  push:
    branches:
      - main
  pull_request:

  schedule:
    - cron: '0 2 * * *' # run at 2 AM UTC
  workflow_dispatch:

jobs:
  unittest:
    strategy:
      matrix:
        python3-minor-version: [7,8,9,10]
        runner: [linux.4xlarge.nvidia.gpu]
    uses: pytorch/test-infra/.github/workflows/linux_job.yml@main
    with:
      runner: ${{ matrix.runner }}
      upload-artifact: multipy_runtime_python3.${{ matrix.python3-minor-version }}
      repository: pytorch/multipy
      gpu-arch-type: cuda
      gpu-arch-version: 116
      script: |
        conda deactivate

        python_version=3.${{ matrix.python3-minor-version }}

        echo "::group::Install runtime build dependencies"
        xargs yum install -y < build-requirements-centos7.txt
        echo "::endgroup::"

        echo "::group::Sync git submodules"
        git -c fetch.parallel=0 -c submodule.fetchJobs=0 submodule update --init --recursive
        echo "::endgroup::"

        echo "::group::Setup virtual environment"

        # sometimes ssl linking is flaky, this makes it explicit
        # for pyenv
        # export CPPFLAGS="-I$(which openssl)/include"
        # export LDFLAGS="-L$(which openssl)/lib"

        pip install virtualenv
        git clone https://github.com/pyenv/pyenv.git ~/.pyenv
        export CFLAGS="-fPIC -g"
        ~/.pyenv/bin/pyenv install --force ${python_version}
        virtualenv -p ~/.pyenv/versions/$(~/.pyenv/bin/pyenv latest ${python_version})/bin/python3 ~/venvs/multipy
        source ~/venvs/multipy/bin/activate
        pip install \
        torch torchvision torchaudio \
        --extra-index-url https://download.pytorch.org/whl/cpu;
        echo "::endgroup::"

        echo "::group::Install dependencies"
        set -eux
        source ~/venvs/multipy/bin/activate
        pip install -r dev-requirements.txt
        deactivate
        echo "::endgroup::"

        echo "::group::Run lightweight pip install within virtualenv"
        source ~/venvs/multipy/bin/activate
        echo "::endgroup::"

        echo "::group::Run pip editable install within virtualenv"
        rm -rf multipy/runtime/build*
        pip install -e .
        echo "::endgroup::"

        echo "::group::Run setup.py install within virtualenv"
        rm -rf multipy/runtime/build*
        python setup.py install
        test -e ~/venvs/multipy/lib/python3.${{ matrix.python3-minor-version }}/site-packages/multipy/runtime/build/libtorch_deploy.a
        echo "::endgroup::"

        echo "::group::Install sdist"
        python setup.py sdist
        pip install dist/*.tar.gz --force-reinstall
        test -e ~/venvs/multipy/lib/python3.${{ matrix.python3-minor-version }}/site-packages/multipy/runtime/build/libtorch_deploy.a
        echo "::endgroup::"

        echo "::group::Install bdist_wheel"
        python setup.py bdist_wheel
        pip install dist/*.whl --force-reinstall
        test -e ~/venvs/multipy/lib/python3.${{ matrix.python3-minor-version }}/site-packages/multipy/runtime/build/libtorch_deploy.a
        echo "::endgroup::"

        echo "::group::Install bdist_wheel with cudatests"
        python setup.py bdist_wheel
        pip install dist/*.whl --force-reinstall --install-option="--cudatests"
        test -e ~/venvs/multipy/lib/python3.${{ matrix.python3-minor-version }}/site-packages/multipy/runtime/build/libtorch_deploy.a
        echo "::endgroup::"

        echo "::group::Deactivate Env"
        deactivate
        echo "::endgroup::"

        echo "::group::Test C++"
        if [[ ${{ matrix.python3-minor-version }} -gt 7 ]]; then \
        curl -fsSL -v -o ~/miniconda.sh -O  https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh  && \
        chmod +x ~/miniconda.sh && \
        /bin/bash ~/miniconda.sh -b -p /opt/conda && \
        rm ~/miniconda.sh && \
        /opt/conda/bin/conda install -y python=${python-version} mkl mkl-include conda-build pyyaml numpy ipython && \
        /opt/conda/bin/conda install -y -c conda-forge libpython-static=${python-version} && \
        /opt/conda/bin/conda install -y pytorch torchvision torchaudio cudatoolkit=11.3 -c pytorch-nightly && \
        /opt/conda/bin/conda clean -ya; \
        fi
        echo "::endgroup::"

        echo "::Run pip install with conda for 3.8+"
        if [[ ${{ matrix.python3-minor-version }} -gt 7 ]]; then
          source /opt/conda/bin/activate
          pip install -e .
        fi
        echo "::endgroup::"
